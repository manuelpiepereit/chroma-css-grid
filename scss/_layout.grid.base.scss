/*
*	Chroma CSS grid.base
*/


//
//	functions
//
@function chroma-column-width($current-column, $total-columns) {
	@return $current-column/$total-columns * 100%;
}

// set new column variable if useing bem syntax
@if ($chroma-is-bem-syntax) {
	$chroma-grid-name-col: #{$chroma-grid-name-row}__#{$chroma-grid-name-col};
}





//
//	mixins
//

// clearfix
@mixin chroma-clearfix() {
	@extend .#{$chroma-grid-namespace}clearfix !optional;
}

// add max container width if needed
@mixin chroma-container($max-width: $chroma-grid-max-width) {
	@include chroma-clearfix;
	@extend %container;

	@if ($max-width != null) {
		max-width: $max-width;
	}
	@if ($chroma-is-static-layout == true) {
		@if ($max-width == null) {
			@warn "Static container layout needs maximum width.";
		}
		width: $max-width;
	}
}

// row element
@mixin chroma-row() {
	@if ($chroma-is-flexbox) {
		@extend %flex-row;
	} @else {
		@include chroma-clearfix;
	}
}






// generic column class
@mixin chroma-column-generic() {
	@if ($chroma-is-flexbox) {
		@extend %generic-flex-column;
	} @else {
		@extend %generic-column;
	}
}

// columns 2, 12, breakpoint
@mixin chroma-column($current-column, $column-amount: $chroma-grid-amount, $breakpoint: false) {
	$width: chroma-column-width($current-column, $column-amount);
	
	@if ($chroma-is-flexbox == false) {
		@if ($breakpoint == false) {
			width: $width;
			*width:	$width - 0.0694%; // IE6 & IE7 Subpixel-Fix	
		} @else {
			@if mixin-exists(at) {
				@include at($breakpoint) {
					width: $width;
					*width:	$width - 0.0694%; // IE6 & IE7 Subpixel-Fix	
				}
			} @else {
			    @warn "Columns with breakpoints need the grid.responsive file.";
			}
		}
		@content;	
	} @else {
		flex-basis: $width;
		max-width: $width;
	}
}

// chroma-column alias
@mixin chroma-columns($args...) {
	@include chroma-column($args...) { @content };
}










// creates column
@mixin chroma-create-column-classes($i, $total-columns: $chroma-grid-amount) {
	
	.#{$chroma-grid-namespace}#{$chroma-grid-name-col}-#{$i} {
		@include chroma-column($i);
	}
	@if ($chroma-column-delimiter) {
		.#{$chroma-grid-namespace}#{$chroma-grid-name-col}-#{$i}#{$chroma-column-delimiter}#{$total-columns} {
			@extend .#{$chroma-grid-namespace}#{$chroma-grid-name-col}-#{$i} !optional;
		}
	}
	
	// add basic fraction classes
	$_chroma-grid-fraction: $i/$total-columns;
	@if $_chroma-grid-fraction == 1/2 {
		.#{$chroma-grid-namespace}#{$chroma-grid-name-col}-1\/2 {
			@extend .#{$chroma-grid-namespace}#{$chroma-grid-name-col}-#{$i} !optional;
		}
	} 
	@if $_chroma-grid-fraction == 1/4 {
		.#{$chroma-grid-namespace}#{$chroma-grid-name-col}-1\/4 {
			@extend .#{$chroma-grid-namespace}#{$chroma-grid-name-col}-#{$i} !optional;
		}
	} 
	@if $_chroma-grid-fraction == 1/3 {
		.#{$chroma-grid-namespace}#{$chroma-grid-name-col}-1\/3 {
			@extend .#{$chroma-grid-namespace}#{$chroma-grid-name-col}-#{$i} !optional;
		}
	} 
	@if $_chroma-grid-fraction == 1/1 {
		.#{$chroma-grid-namespace}#{$chroma-grid-name-col}-full,
		.#{$chroma-grid-namespace}#{$chroma-grid-name-col}-1\/1 {
			@extend .#{$chroma-grid-namespace}#{$chroma-grid-name-col}-#{$i} !optional;
		}
	}
}







//
//	base classes
//

// box-sizing
* {
	box-sizing: border-box;
	&:before,
	&:after {
		box-sizing: border-box;
	}

}

// clearfix
.#{$chroma-grid-namespace}clearfix {
	*zoom: 1;

	&:before,
	&:after {
		content: " ";
		display: table;
	}

	&:after {
		clear: both;
	}	
}


// abstract classes
%container {
	margin-left: auto;
	margin-right: auto;
	width: 100%;
}

%flex-row {
	display: flex;
	flex-flow: row wrap;
	justify-content: flex-start;
	align-items: flex-start;
	align-content: flex-start;
}

%generic-column {
	padding-left: $chroma-grid-gutter;
	padding-right: $chroma-grid-gutter;
	> .#{$chroma-grid-namespace}#{$chroma-grid-name-row} {
		margin-left: -$chroma-grid-gutter;
		margin-right: -$chroma-grid-gutter;
	}
	float: left;
	display: block;
}

%generic-flex-column {
	padding-left: $chroma-grid-gutter;
	padding-right: $chroma-grid-gutter;
	flex: 0 0 auto;
}





//
//	scaffolding
//
@if ($chroma-grid-scaffold-default == true) {
	
	// container
	.#{$chroma-grid-namespace}#{$chroma-grid-name-container} {
		@include chroma-container();
	}

	// row
	.#{$chroma-grid-namespace}#{$chroma-grid-name-row} {
		@include chroma-row();
	}
	// generic column
	[class*="#{$chroma-grid-namespace}#{$chroma-grid-name-col}-"] {
		@include chroma-column-generic();
	}
	@if ($chroma-is-flexbox) {
		[class*="#{$chroma-grid-namespace}#{$chroma-grid-name-col}-*"] {
			flex-grow: 1;
		}
	}

	// columns spanning from 1 to N
	@for $i from 1 through $chroma-grid-amount {
		@include chroma-create-column-classes($i, $chroma-grid-amount);
	}
}

