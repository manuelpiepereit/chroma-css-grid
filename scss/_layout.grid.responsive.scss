/*
*   Chroma CSS grid.responsive
*/


//
//  functions
//
@function mapReverse ($map) {
    $result: null;

    @if type-of($map) == "map" {
        $keys: map-keys($map);
        $map-reversed: ();
        
        @for $i from length($keys) through 1 {
            $map-reversed: map-merge(
                $map-reversed,
                (nth($keys, $i): map-get($map, nth($keys, $i)))
            );
        }

        @if type-of($map-reversed) == "map" {
            $result: $map-reversed;
        } @else {
            @warn 'There was an error reversing the order of "#{$map}"';
        }
    } @else {
        @warn '"#{$map}" is not a valid map';
    }

    @return $result;
}





//
//  settings
// 

// check if layout is mobile first and set variables
@if ($chroma-is-mobile-first == false) {
    // reverse breakpoint map
    $chroma-breakpoints-reverse: mapReverse($mq-breakpoints);
    $chroma-breakpoints: $chroma-breakpoints-reverse;
}





// sass-mq based on mobile first layout var
@mixin chroma-media($breakpoint) {
    @if ($chroma-is-mobile-first == true) {
        @include mq($from: $breakpoint) {
            @content;
        }
    } @else {
        @include mq($until: $breakpoint) {
            @content;
        }
    }
}
// alias for chroma-media
@mixin at($args...) {
    @include chroma-media($args...) { @content };
}





//
//  mixins for default classes
//

@mixin chroma-create-grid-responsive($breakpoint, $total-columns: $chroma-grid-amount) {
    @for $i from 1 through $total-columns {
        .#{$chroma-grid-namespace}#{$chroma-grid-name-col}-#{$i}#{$chroma-breakpoint-delimiter}#{$breakpoint} {
            @include chroma-columns($i, $chroma-grid-amount);
        }
        // add basic fraction classes
        $_chroma-grid-fraction: $i/$total-columns;
        @if $_chroma-grid-fraction == 1/2 {
            .#{$chroma-grid-namespace}#{$chroma-grid-name-col}-1\/2#{$chroma-breakpoint-delimiter}#{$breakpoint} {
                @extend .#{$chroma-grid-namespace}#{$chroma-grid-name-col}-#{$i}#{$chroma-breakpoint-delimiter}#{$breakpoint} !optional;
            }
        } 
        @if $_chroma-grid-fraction == 1/3 {
            .#{$chroma-grid-namespace}#{$chroma-grid-name-col}-1\/3#{$chroma-breakpoint-delimiter}#{$breakpoint} {
                @extend .#{$chroma-grid-namespace}#{$chroma-grid-name-col}-#{$i}#{$chroma-breakpoint-delimiter}#{$breakpoint} !optional;
            }
        } 
        @if $_chroma-grid-fraction == 1/4 {
            .#{$chroma-grid-namespace}#{$chroma-grid-name-col}-1\/4#{$chroma-breakpoint-delimiter}#{$breakpoint} {
                @extend .#{$chroma-grid-namespace}#{$chroma-grid-name-col}-#{$i}#{$chroma-breakpoint-delimiter}#{$breakpoint} !optional;
            }
        } 
        @if $_chroma-grid-fraction == 1/1 {
            .#{$chroma-grid-namespace}#{$chroma-grid-name-col}-full#{$chroma-breakpoint-delimiter}#{$breakpoint},
            .#{$chroma-grid-namespace}#{$chroma-grid-name-col}-1\/1#{$chroma-breakpoint-delimiter}#{$breakpoint} {
                @extend .#{$chroma-grid-namespace}#{$chroma-grid-name-col}-#{$i}#{$chroma-breakpoint-delimiter}#{$breakpoint} !optional;
            }
        }
        // add additional column delimiter classes
        @if ($chroma-column-delimiter) {
            .#{$chroma-grid-namespace}#{$chroma-grid-name-col}-#{$i}#{$chroma-column-delimiter}#{$total-columns}#{$chroma-breakpoint-delimiter}#{$breakpoint} {
                @extend .#{$chroma-grid-namespace}#{$chroma-grid-name-col}-#{$i}#{$chroma-breakpoint-delimiter}#{$breakpoint};
            }   
        }
    }    
}



//
//  scaffolding for responsive columns
//

@if ($chroma-grid-scaffold-responsive == true) {
    @each $_mq, $_px in $chroma-breakpoints {
        @if ($chroma-is-mobile-first == true) {
            // create all column classes for each breakpoint
            @include mq($from: $_mq) {
                @include chroma-create-grid-responsive($_mq);
            }
        } @else {
            @include mq($until: $_mq) {
                @include chroma-create-grid-responsive($_mq);
            }
        }
    }
}









/**
*   Chroma grid responsive modifiers
*/
@mixin chroma-create-grid-responsive-modifier($breakpoint, $total-columns: $chroma-grid-amount) {
    
    // push, pull, offset
    @for $i from 0 through $total-columns {
        .#{$chroma-grid-namespace}#{$chroma-grid-name-col}-#{$i}--push#{$chroma-breakpoint-delimiter}#{$breakpoint} {
            @include chroma-column-push($i, $total-columns);
        }
        .#{$chroma-grid-namespace}#{$chroma-grid-name-col}-#{$i}--pull#{$chroma-breakpoint-delimiter}#{$breakpoint} {
            @include chroma-column-pull($i, $total-columns);
        }
        .#{$chroma-grid-namespace}#{$chroma-grid-name-col}-#{$i}--offset#{$chroma-breakpoint-delimiter}#{$breakpoint} {
            @include chroma-column-offset($i, $total-columns);
        }

        @if ($chroma-column-delimiter) {
            .#{$chroma-grid-namespace}#{$chroma-grid-name-col}-#{$i}#{$chroma-column-delimiter}#{$chroma-grid-amount}--push#{$chroma-breakpoint-delimiter}#{$breakpoint} {
                @extend .#{$chroma-grid-namespace}#{$chroma-grid-name-col}-#{$i}--push#{$chroma-breakpoint-delimiter}#{$breakpoint};
            }
            .#{$chroma-grid-namespace}#{$chroma-grid-name-col}-#{$i}#{$chroma-column-delimiter}#{$chroma-grid-amount}--pull#{$chroma-breakpoint-delimiter}#{$breakpoint} {
                @extend .#{$chroma-grid-namespace}#{$chroma-grid-name-col}-#{$i}--pull#{$chroma-breakpoint-delimiter}#{$breakpoint};
            }
            .#{$chroma-grid-namespace}#{$chroma-grid-name-col}-#{$i}#{$chroma-column-delimiter}#{$chroma-grid-amount}--offset#{$chroma-breakpoint-delimiter}#{$breakpoint} {
                @extend .#{$chroma-grid-namespace}#{$chroma-grid-name-col}-#{$i}--offset#{$chroma-breakpoint-delimiter}#{$breakpoint};
            }
        }
    }

    // center, left, right, bleed
    .#{$chroma-grid-namespace}#{$chroma-grid-name-col}--center#{$chroma-breakpoint-delimiter}#{$breakpoint} {
        @include chroma-column-center()
    }
    .#{$chroma-grid-namespace}#{$chroma-grid-name-col}--left#{$chroma-breakpoint-delimiter}#{$breakpoint} {
        @include chroma-column-left()
    }
    .#{$chroma-grid-namespace}#{$chroma-grid-name-col}--right#{$chroma-breakpoint-delimiter}#{$breakpoint} {
        @include chroma-column-right()
    }
    .#{$chroma-grid-namespace}#{$chroma-grid-name-col}--bleed#{$chroma-breakpoint-delimiter}#{$breakpoint} {
        @include chroma-column-bleed()
    }

}






//
//  scaffolding for responsive modifiers
//
@if mixin-exists(chroma-column-push) {
} @else {
    $chroma-grid-scaffold-modifier: false;
}

@if ($chroma-grid-scaffold-responsive == true AND $chroma-grid-scaffold-modifier == true) {
    // responsive modifiers
    @each $_mq, $_px in $chroma-breakpoints {
        @if ($chroma-is-mobile-first == true) {    
            @include mq($from: $_mq) {
                @include chroma-create-grid-responsive-modifier($_mq, $chroma-grid-amount);
            }
        } @else {        
            @include mq($until: $_mq) {
                @include chroma-create-grid-responsive-modifier($_mq, $chroma-grid-amount);
            }
        }
    }
}

